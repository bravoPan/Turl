import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from '../styles/Home.module.css'
import { idToLongURL } from '../modules/encrypt/encrypt'
import { shortURLtoID } from '../modules/decrypt/decrypt'
import { useState } from 'react'
import { ShortRow } from '../components/Home/shortImage'
import { useSession, signIn, signOut } from "next-auth/react";
import { githubInfo } from '../modules/firestore/dataProcess'


const inter = Inter({ subsets: ['latin'] })

const postLongURL = async (longURL: string, githubData:githubInfo)=>{
  const response = await fetch('/api/db', {
    method: "POST",
    body: JSON.stringify({longURL, githubData}),
    headers : {
      'Content-Type': 'application/json'
    }
  })
  const data = await response.json()
  return data
}

const queryURL = async (longURL: string) => {
  const response = await fetch(`/api/db?longURL=${longURL}`, {
    method: "GET",
    headers : {
      'Content-Type': 'application/json'
    }
  })
  // console.log(response.json())
  if(response.status === 200){
    console.log(await response.json())
  }
  
  return "hh"
}

export default function Home() {
  const { data: session } = useSession();
  const [urlInput, setURLInput] = useState('');

  const [queryURLInput, setQueryURLInput] = useState('')

  const handleURLInputChange = (e:React.FormEvent<HTMLInputElement>) => {
    e.preventDefault();
    setURLInput(e.currentTarget.value);
  }

  return (
    <>
    <div className={styles.container}>
      <Head>
        <title>TinyURL in Next</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        
      </Head>

      <div>
        {session? 
        <>
        <Image src={session.user?.image as string} width={200} height={200} alt="github oauth image"/>
        <div>sign in as {session.user?.name}</div>
        <div>with email {session.user?.email} </div>

          <input type="text" placeholder='Your Long URL' onChange={e => handleURLInputChange(e)} />
          <button onClick={() => postLongURL(urlInput, {
            githubUserEmail: session.user?.email as string, 
            githubUserImageURL: session.user?.image as string,
            githubUserName: session.user?.name as string})}>post</button>
          <button onClick={()=>signOut()}>Signout</button>
        </>
        :
        <>
        <input type="text" placeholder='Your Long URL' onChange={e => setQueryURLInput(e.currentTarget.value)} />
        <button onClick={()=>queryURL(queryURLInput)}>queryURL</button>
        <button onClick={(e) => {e.preventDefault;signIn()}}>Sign in</button>
        </>
        }
        
        {/* <button onClick={() => console.log(shortURLtoID(idToLongURL(0)))}>Enlongate</button> */}
      </div>
      
  </div>
    </>
    
  )
}